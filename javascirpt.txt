JavaScritp 

1. Sum Algorithm
 
// 주어진 범위에 주어진 조건에 해당하는 데이터의 합계
//[?] N명의 점수 중에서 80점 이상인 점수의 합계

//[1] Input : n명의 점수
	var scores = [100, 75, 50, 45, 90, 95];
	var sum = 0; // 합계가  담길 그릇
	var N = scores.length; // 의사코드(슈도코드): 배열의 개수
	var count = 0;

//[2] Process: SUM Algorithm 영역 
     -> 주어진 범위에 주어진 조건(필터링)

	for (var i = 0; i < N; i++) { //주어진 범위
    	if (scores[i] >= 80) { //주어진 조건
        	sum += scores[i];  
// 	SUM , sum = sum + scores[i]; scores[i]은 자리고 결과는 값이 출력
        	count = count + 1; // 해당하는 갯수
    }
}
console.log("해당하는 갯수: " + count);

//[3] Output

console.log(N + "명의 점수 중 80점 이상의 총점: " + sum);

◌ Sequence Algorithm
//[?] 1부터 20까지의 정수 중 홀수의 합을 구하기
//연속하는 두수의 차이가 일정한 수열

//Input
	var sum = 0;  //sum 담을 그릇
//Process
	var sequence = "";

	for (let i = 1; i <= 20; i++) { // 주어진 범위
    	if (i % 2 == 1) {   // 주어진 조건 -> 필터링은 홀수
        	sum += i;  //sum = sum + i; -> sum
        	sequence += i + " "; // 등차수열 
   }
}
	console.log("등차수열: " + sequence); // sequence -> 등차수열 출력
	console.log("1부터 20까지의 홀수의 합:" + sum);

- Do~While Algorithm
// 1부터 5까지의 정수의 합 -> 반복문
	var sum = 0;
	var i = 1;  // 초기식
	do {
    	sum += i;  // 실행문
    	i++;       // 증감식

	} while (i <= 5); // 조건식

	console.log("합계: " + sum);

2. Count Algorithm
//주어진 범위에 주어진 조건에 해당하는 자료의 개수
//1~1000까지의 정수 중 13배수의 개수

//Input
	var count = 0; //갯수를 저장하는 변수 -> 0으로 초기화

//Process : count algorithm 영역 
            -> 주어진 범위에 주어진 조건(필터링)

	for (let i = 1; i <= 1000; i++) {
    	if (i % 13 == 0) {  //13의 배수 증가
        	count = count + 1; 
         //count += 1; 또는 count++; 와 같음
    }
}

	console.log("1부터 1000까지의 정수 중 13배수의 개수: " + count);

3. Average Algorithm
// 주어진 범위에 주어진 조건에 해당하는 자료의 평균
//[?] n명의 점수 중에서 80이상 95이하인 점수의 평균
(function () {
    //Input: 입력 n명의 점수
    var data = [90, 65, 78, 50, 95]; //데이터
    var sum = 0; //합계 그릇
    var count = 0; // 갯수 그릇
    var N = data.length; //의사코드(슈도코드) -> 데이터의 수

    //Process: average = sum / count
    for (var i = 0; i < N; i++) {  // 주어진 범위
        if (data[i] >= 80 && data[i] <= 95) { // 조건
            sum += data[i]; //sum 
            count++;         //count
        }
        //sum = sum + data[i];
        //count = count + 1;
    }
    console.log("80이상 95이하의 총합: " + sum + " / "                   + "80이상 95이하의 개수: " + count);

    var average = 0.0;
    if (sum != 0 && count != 0) {
        average = sum / count; //average
    }
    //Output
    console.log("80이상 95이하의 평균: " + average.toFixed(2));
})();

4. Max Algorithm
//주어진 범위 + 주어진 조건의 자료들의 가장 큰 값
//[?] 주어진 데이터 중에서 가장 큰 값

	(function () {

    // Initialize 
	    var max = Number.MIN_SAFE_INTEGER; 
   //숫자 형식의 데이터 중 가장 작은 값으로 초기화

   //Input
             var number = [-2, -5, 11, 7, 5];  //max-1
   	var N = number.length;

    for (var i = 0; i < N; i++) {
        if (number[i] > max) { // 더 큰 데이터가 있다면
            max = number[i]; //max: 더 큰 값으로 할당
        }
    }
    console.log("최댓값: " + max);
})();

5. Min Algorithm
// 주어진 범위에 주어진 조건의 자료들의 가장 작은 수
//[?] 주어진 데이터 중에서 가장 작은 짝수의 값
var min = Number.MAX_SAFE_INTEGER;
	 var number = [5, 3, 7, 1, 9, 12, 6];  // min 1, 짝수 2
	var N = number.length;

	for (var i = 0; i < N; i++) {
    	if (number[i] < min && number[i] % 2 == 0) {                     //짝수 최솟값
        	min = number[i]; // min: 더 작은 값으로 할당
    }

	    console.log("짝수 최솟값: " + min);
}

6. Near Algorithm
// 가까운 값 -> 차잇값의 절댓값의 초솟값
//[?] 원본데이터 중에서 대상 데이터와 가장 가까운 값
(function () {
    //Initialize
    var min = Number.MAX_SAFE_INTEGER;
    //Input

    var number = [10, 20, 30, 27, 17];
    var target = 25; //target과 가까운 값
    var near = 0; //가까운 값 :27
    var N = number.length;

    for (var i = 0; i < N; i++) {
        var abs = Math.abs(number[i] - target); 
                 //차잇값의 절대값   //console.log(abs);
        if (abs < min) {
            min = abs; // 최솟값 알고리즘
            near = number[i]; 
                // near: 차잇값의 최솟값일 때의 값
        }
    }
    //Output
    console.log(target + "와 가장 가까운 값: " + near + "(차이: "                  + min + ")");
})();

7. Rank Algorithm
//점수 데이터에 대한 순위 구하기
//[?] 주어진 범위 데이터의 순위(등수)를 구하기
(function () {
    // Input 
    var scores = [90, 87, 100, 95, 80]; 
                  //JSON배열, DB , 등수: 3,4,1,2,5
    var N = scores.length;
    var rankings = Array(N).fill(1); 
   // 등수는 모두 1등으로 초기화 -> 순위 알고리즘의 기본적인 모양

    for (let i = 0; i < N; i++) {  // 현재의 나의 점수 : i번째
        // console.log(scores[i] + "점: " + rankings[i] + "등")
        rankings[i] = 1; //1등으로 초기화, 순위배열을 매 회전마다 1등으로 초기화 -> 나의 순위를 1등으로 초기화하는 것이 가장 핵심
        for (let j = 0; j < N; j++) {            
         if (scores[i] < scores[j]) { // 현재(i)와 나머지(j) 비교
                rankings[i]++; 
 // rank algorithm : 나보다 큰 점수가 나오면 1씩 순위를 증가
            }
        }
    }
    for (let i = 0; i < N; i++) {
        console.log(scores[i].toString().padStart(3) +          "점: " + rankings[i] + "등");
    }
})();

8. Sort Algorithm   -> 가장 중요

//주어진 범위에서 불규칙적으로 나열된 순서를 일정 기준에 따 순서대로 나열
//selection(선택), bubble, quick
//오름차순(ASCeding):1,2,3순으로 작은 것부터 큰 순으로 정렬
//내리차순(DESCeding):3,2,1순으로 큰 것부터 작은 순으로 정렬
//selection algorithm -> 데이터 하나를 기준으로 가장 작거나 큰 데이터와 자리를 바꾸는 식으로 반복 비교
//데이터 개수가 n개이면 회전수는 n-1회 -> 가장 작은 수 부터 왼쪽에 채워짐 (1회전시 무조건 왼쪽 것과 비교

//sort algorithm : 가장 작은(또는 큰) 데이터를 왼쪽으로 순서대로 이동

(function () {
 // Input -> data structure 영역(array, list, stack, queue, tree, DB)
    var data = [3, 2, 1, 5, 4]; // 정렬되지 않는 데이터
    var N = data.length;

    // Process -> 모든 언어의 변경되지 않는 영역
    for (let i = 0; i < N - 1; i++) { // i = 0 to N – 1 
        -> 가장 핵심
    for (let j = i + 1; j < N; j++) { // j = i + 1 to N          -> 가장 핵심
            if (data[i] > data[j]) { 
// 부동호 방향에 따라 내림차순(>), 오름차순(<) -> 가장 핵심
               var temp = data[i];
                data[i] = data[j]; // i를 temp에 넣고 i자리에 j를 넣고 그자리에는 처음의 i값을 다시 넣는다 ->치환
                data[j] = temp;  //SWAP
            }
        }
        // console.log((i + 1) + "회전: "); // 참고용
        // for (let i = 0; i < N; i++) {  // 참고용
        //     console.log(data[i]);     // 참고용
        // }
    }

    // Output: UI-> console, Desktop, Web, Mobile
    for (let i = 0; i < N; i++) {
        console.log(data[i]);
    }
})();

9. Search Algorithm

// 주어진 데이터가 오름차순으로 정렬되어 있다고 가장 -> 순차검색, 이진검색(binary search = divide and conquer)
// 중간 인덱스를 찾는 것이 핵심 
   -> 중간 인덱스 mid = low 인덱수 + high 인덱스 / 2

//[?] 정렬되어 있는 데이터를 이진 검색을 사용하여 반씩 나눠서 검색
//주어진 데이터에서 특정 데이터 찾기

(function () {
    //Input

    var data = [1, 3, 5, 7, 9]; 
   //오름차순으로 정렬되어 있다고 가정
    var N = data.length;
    var search = 3; //검색할 데이터
    var flag = false; 
   //플래그 변수 : 찾으면 true 찾지 못하면 false(기본값)
    var index = -1; 
   // (없는 데이터라고 세팅) 인덱스 변수: 찾는 위치

    //Process: 이진 검색(binary search): 
                 full scan -> index scan

    var low = 0;        //min: 낮은 인덱스
    var high = N – 1;  //max: 높은 인덱스
    while (low <= high) {  //low 와 high 가 만날때 까지
        var mid = parseInt((low + high) / 2); 
// 중간 인덱스(mid) 구하기 -> 홀수는 가운데 짝수는 가운데서 왼쪽 꺼 ,정수변환 parseInt
        if (data[mid] == search) { // 중간 인덱스에서 찾기
            flag = true;
            index = mid;
            break; // 찾으면 플래그 인덱스 저장 후 종료           }
        if (data[mid] > search) { //
            high = mid – 1; 
      // 찾을 데이터가 mid보다 작으면 왼쪽 영역으로 이동            
        } else {
            low = mid + 1;
     // 찾을 데이터가 mid보다 크면 오른쪽 영역으로 이동            
        }
    }

    //Output
    if (flag) {
        console.log(search + "을 " + index + "위치에서                       찾았습니다.");

    } else {
        console.log("찾지 못했습니다.")
    }
})();

10. Merge Algorithm
//오름차순으로 정렬되어 있는 정수 배열을 하나로 병합
//[?] 2개의 정수 배열 합치기: 단 2개의 배열은 오름차순으로 정렬되어 있다고 가정

(function () {
    //Input
    var first = [1, 3, 5];
    var second = [2, 4];
    var M = first.length;
    var N = second.length; //M:N 관행적으로 사용
    var merge = Array(M + N).fill(0); 
                   //병합된 배열을 담을 그릇
    var i = 0;
    var j = 0;
    var k = 0; // 인덱스는 i j k 관행적 사용

    //Process: merge algorithm

    while (i < M && j < N) {
                //둘 중 하나라도 배열의 끝에 도달할 때까지
        if (first[i] < second[j]) {  
               // 더 작은 값을 merge 배열에 저장
               // merge = first[i];
               // k++;
               // i++;            
            merge[k++] = first[i++]; 
              // 작은 값 대입 후 각각의 인덱스 증가
        } else {
            merge[k++] = second[j++];
        }
    }
    while (i < M) { //첫 번째 배열이 끝까지 도달할 때까지
         merge[k++] = first[i++];
    }

    while (j < N) { //두번째 배열이 끝까지 도달할 때까지
         merge[k++] = second[j++];
    }

    //Output
    for (let i = 0; i < M + N; i++) {
        console.log(merge[i]);
    }
})();


11. Mode Algorithm
//점수 인덱스(0~n)의 개수(count)의 최댓갑(max) -> 값을     인덱스로 처리함 : 가장 핵심
//[?] 주어진 데이터에서 가장 많이 나타난(중복된) 값
(function () {
    //Input: 범위는 0부터 n점까지의 점수만 들어온다고 가정
    var scores = [1, 3, 4, 3, 5]; //0~5까지만 들어온다고 가정
    var indexes = Array(6).fill(0); 
              //0~5까지만 점수 인덱스의 개수 저장
    var max = Number.MIN_SAFE_INTEGER; // max 알고리즘 적용
    var mode = 0; //최빈값이 담길 그릇
    var N = scores.length;

    //Process: Date -> Index -> Count -> Max -> mode
    for (let i = 0; i < N; i++) {
        indexes[scores[i]]++; //count
    }
    for (let i = 0; i < N; i++) {
        if (indexes[i] > max) {
            max = indexes[i]; //max -> 2
            mode = i; //mode -> 3        
        }
    }

    //Output
    console.log("최빈값: " + mode + " -> " + max + "                     번 나타남");
})();

12. Group Algorithm
//점수 인덱스(0~n)의 개수(count)의 최댓갑(max) -> 값을    인덱스로 처리함 : 가장 핵심
//[?] 주어진 데이터에서 가장 많이 나타난(중복된) 값
(function () {
    //Input: 범위는 0부터 n점까지의 점수만 들어온다고 가정
    var scores = [1, 3, 4, 3, 5]; //0~5까지만 들어온다고 가정
    var indexes = Array(6).fill(0); 
                   //0~5까지만 점수 인덱스의 개수 저장
    var max = Number.MIN_SAFE_INTEGER; // max 알고리즘 적용
    var mode = 0; //최빈값이 담길 그릇
    var N = scores.length;

    //Process: Date -> Index -> Count -> Max -> mode
    for (let i = 0; i < N; i++) {
        indexes[scores[i]]++; //count
    }
    for (let i = 0; i < N; i++) {
        if (indexes[i] > max) {
            max = indexes[i]; //max -> 2
            mode = i; //mode -> 3        
        }
    }

    //Output
    console.log("최빈값: " + mode + " -> " + max + "                    번 나타남");
})();